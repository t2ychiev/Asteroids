using PhysicsBehaviour;
using System;
using UnityEngine;
using Utilities;
using Utilities.Components;

namespace HealthSystem
{
    public sealed class InvulnerabilityBehaviour : IDisposable
    {
        private bool _isEnable = false;
        float _time;
        private PhysicsUnit _physicsUnit;
        private ParticleSystem _fx;
        private SpriteRenderer _spriteRenderer;
        private SpriteRendererFade _spriteRendererFade;
        private Health _health;
        private AsyncMethod _asyncMethod;

        public InvulnerabilityBehaviour(Health health, PhysicsUnit physicsUnit, ParticleSystem fx, SpriteRenderer spriteRenderer, SpriteRendererFade spriteRendererFade, float time)
        {
            _health = health;
            _physicsUnit = physicsUnit;
            _fx = fx;
            _spriteRenderer = spriteRenderer;
            _time = time;
            _spriteRendererFade = spriteRendererFade;
            _physicsUnit.onBounce += EnableDelay;
        }

        ~InvulnerabilityBehaviour()
        {
            if (_asyncMethod != null)
                _asyncMethod.Stop();

            _physicsUnit.onBounce -= EnableDelay;
        }

        public void Dispose()
        {
            if (_asyncMethod != null)
                _asyncMethod.Stop();
        }

        private void SetEnable(bool enable)
        {
            if (_isEnable == enable) return;

            _isEnable = enable;
            _health.SetInvulnerability(enable);
            _physicsUnit.SetIsTriggerCollider(enable);

            if (_isEnable)
            {
                if (_fx != null)
                {
                    _fx.gameObject.SetActive(true);
                    _fx.Play();
                }

                if (_spriteRenderer != null)
                    _spriteRendererFade.LoopFade(_spriteRenderer, _time);
            }
            else
            {
                if (_fx != null)
                {
                    _fx.gameObject.SetActive(false);
                    _fx.Stop();
                }
            }
        }

        private void EnableDelay()
        {
            if (_isEnable) return;

            _asyncMethod = new AsyncMethod(_time, true, () =>
            {
                SetEnable(true);
            }, null, () =>
            {
                SetEnable(false);
            });

            _asyncMethod.Run(0.05f);
        }
    }
}
